*********************CONFIG MANAGEMENT

>npm -i -s dotenv

>>>>>>>>>>>/.env  
PORT = 5000		//static info for the whole app env
>>>>>>>>>>>>.json //dynamic info is kept here

>>>>>>>>>>/config/index.js
require("dotenv").config();

module.exports = {
	PORT: process.env.PORT

}
>>>>>>>>>>>>>>>>>>/bin/www
var {PORT} = require("../config");

var port  = normaloizePort(PORT || '3000');

>>>>>>>>>>>/.env

SEQUELIZE_DATABASE = postgres
SEQUELIZE_USERNAME = postgres
SEQUELIZE_PASSWORD = 123456789
SEQUELIZE_HOST = localhost
SEQUELIZE_DIALECT = postgres
SECRET = asdafghjk

>>>>>>>>>>/config/index.js
module.exports = {
	sequelize_database:process.env.SEQUELIZE_DATABASE,
	sequelize_username:process.env.SEQUELIZE_USERNAME,
	sequelize_password:process.env.SEQUELIZE_PASSWORD,
	sequelize_host:process.env.SEQUELIZE_HOST,
	sequelize_dialect:process.env.SEQUELIZE_DIALECT,
	SECRET: process.env.SECRETS
	

}
>>>>>>>>>>>>>>>>>>>/database/index.js
const {
	sequelize_database,
	sequelize_username,
	sequelize_password,
	sequelize_host,
	sequelize_dialect
} = require("../config")

const sequelize = new Sequelize(

	sequelize_database,
	sequelize_username,
	sequelize_password,
	{
	host: sequelize_host,
	dialect: sequelize_dialect
	}
	
)

>>>>>>>>>>>>>>>>>>>>>>/routes/index.js

router.post("/register",registerInitialCheck,register);
router.post("register-super-admin",registerInitialCheck,registerSuperAdmin);

>>>>>>>>>>>>>>>>>>>>>/controllers/register.js
const User = require("../models/mongo");


const registerSuperAdmin = async(req,res) =>{
	//copy paste from registercheck from authentcation tha

replace with this line in there => {name :  , password:  , fullname : , role:"super-admin"	};

}

module.exports = {register,registerSuperAdmin};

>>>>>>>>>>>>>>>>>>>>>>/routes/index.js

var {register , registerSuperAdmin} = require("../controllers/register")

>>>>>>>>>>>>>>>>>>>>/models/mongo.js

const UserSchema = new Schema({
	role:	{type: String, default: "user"}
});
>>>>>>>>>>>>>>>>>>>>>/controllers/register.js
const savedUser = await newUser.save();
req.session.User = savedUser;

>>>>>>>>>>>>>>>>>>>>/middlewares/checkSuperAdmin.js

const check =(req,res,next) =>{
	if(req.session.User.role === "super-admin"){
		res.status(200).send("success")
	}
	res.status(401).send("Needs to be super admin");
	}

>>>>>>>>>>>>>>>>>>>>>>/routes/index.js

var check  = require("../middlewares/checkSuperAdmin");

router.get("/super",check);
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>/controllers/register.js

change ==> user.findone().exec() ==> .findone()

>>>>>>>>>>>>>>>>>>>>>>>>>>>>Install
npm install passport passport-jwt

for authentcation for Google and facebook
jwt is used for manually password entry
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>app.js
const passport  = require("passport")



app.use(passport.initialize());
require("./middlewares/passport")(passport);

>>>>>>>>>>>>>>>>>>>>>>>>>>middlewares/passport.js
//for mongo or sequelize
//jwt used when registering then evertyhing is saved
//but when we login per session a code send from server to client and saved with cleint called JWT
//now on whenever client routes to new path this jwt token has to be send
//strategy can be for google and facebook or simple auth


const User = require
